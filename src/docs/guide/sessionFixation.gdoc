To guard against [session-fixation attacks|https://en.wikipedia.org/wiki/Session_fixation] set the @useSessionFixationPrevention@ attribute to @true@:

{code}
grails.plugin.springsecurity.useSessionFixationPrevention = true
{code}

Upon successful authentication a new HTTP session is created and the previous session's attributes are copied into it. If you start your session by clicking a link that was generated by someone trying to hack your account, which contained an active session id, you are no longer sharing the previous session after login. You have your own session.

Session fixation is less of a problem now that Grails by default does not include jsessionid in URLs (see [this JIRA issue|https://jira.grails.org/browse/GRAILS-3364]), but it's still a good idea to use this feature.

Note that there is an issue when using the [cookie-session|https://grails.org/plugin/cookie-session] plugin; see [this issue|https://github.com/benlucchesi/grails-cookie-session-v2/issues/17] for more details.

The table shows configuration options for session fixation.

{table}
*Property* | *Default Value* | *Meaning*
useSessionFixationPrevention | @true@ | Whether to use session fixation prevention.
sessionFixationPrevention.migrate | @true@ | Whether to copy the session attributes of the existing session to the new session after login.
sessionFixationPrevention.alwaysCreateSession | @false@ | Whether to always create a session even if one did not exist at the start of the request.
{table}
