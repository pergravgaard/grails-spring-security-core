The plugin includes GSP tags to support conditional display based on whether the user is authenticated, and/or has the required role to perform a particular action. These tags are in the @sec@ namespace and are implemented in @grails.plugin.springsecurity.SecurityTagLib@.

h4. ifLoggedIn
Displays the inner body content if the user is authenticated.

Example:

{code}
<sec:ifLoggedIn>
Welcome Back!
</sec:ifLoggedIn>
{code}

h4. ifNotLoggedIn
Displays the inner body content if the user is not authenticated.

Example:

{code}
<sec:ifNotLoggedIn>
<g:link controller='login' action='auth'>Login</g:link>
</sec:ifNotLoggedIn>
{code}

h4. ifAllGranted
Displays the inner body content only if all of the listed roles are granted.

Example:

{code}
<sec:ifAllGranted roles="ROLE_ADMIN,ROLE_SUPERVISOR">secure stuff here</sec:ifAllGranted>
{code}

h4. ifAnyGranted
Displays the inner body content if at least one of the listed roles are granted.

Example:

{code}
<sec:ifAnyGranted roles="ROLE_ADMIN,ROLE_SUPERVISOR">secure stuff here</sec:ifAnyGranted>
{code}

h4. ifNotGranted
Displays the inner body content if none of the listed roles are granted.

Example:

{code}
<sec:ifNotGranted roles="ROLE_USER">non-user stuff here</sec:ifNotGranted>
{code}

h4. loggedInUserInfo
Displays the value of the specified UserDetails field if logged in. For example, to show the username property:

{code}
<sec:loggedInUserInfo field="username"/>
{code}

If you have customized the UserDetails (e.g. with a custom UserDetailsService) to add a @fullName@ property, you access it as follows:

{code}
Welcome Back <sec:loggedInUserInfo field="fullName"/>
{code}

h4. username
Displays the value of the UserDetails @username@ field if logged in.

{code}
<sec:ifLoggedIn>
Welcome Back <sec:username/>!
</sec:ifLoggedIn>
<sec:ifNotLoggedIn>
<g:link controller='login' action='auth'>Login</g:link>
</sec:ifNotLoggedIn>
{code}

h4. ifSwitched
Displays the inner body content only if the current user switched from another user. (See also [Switch User|guide:switchUser].)

{code}
<sec:ifLoggedIn>
Logged in as <sec:username/>
</sec:ifLoggedIn>

<sec:ifSwitched>
<a href='${request.contextPath}/j_spring_security_exit_user'>
   Resume as <sec:switchedUserOriginalUsername/>
</a>
</sec:ifSwitched>

<sec:ifNotSwitched>

   <sec:ifAllGranted roles='ROLE_SWITCH_USER'>

   <form action='${request.contextPath}/j_spring_security_switch_user' method='POST'>

      Switch to user: <input type='text' name='j_username'/><br/>

      <input type='submit' value='Switch'/> </form>

   </sec:ifAllGranted>

</sec:ifNotSwitched>
{code}

h4. ifNotSwitched
Displays the inner body content only if the current user has not switched from another user.

h4. switchedUserOriginalUsername
Renders the original user's username if the current user switched from another user.

{code}
<sec:ifSwitched>
<a href='${request.contextPath}/j_spring_security_exit_user'>
   Resume as <sec:switchedUserOriginalUsername/>
</a>
</sec:ifSwitched>
{code}

h4. access

Renders the body if the specified expression evaluates to @true@ or specified URL is allowed.

{code}
<sec:access expression="hasRole('ROLE_USER')">

You're a user

</sec:access>
{code}

{code}
<sec:access url="/admin/user">

<g:link controller='admin' action='user'>Manage Users</g:link>

</sec:access>
{code}

You can also guard access to links generated from controller and action names or named URL mappings instead of hard-coding the values, for example

{code}
<sec:access controller='admin' action='user'>

<g:link controller='admin' action='user'>Manage Users</g:link>

</sec:access>
{code}

or if you have a named URL mapping you can refer to that:

{code}
<sec:access mapping='manageUsers'>

<g:link mapping='manageUsers'>Manage Users</g:link>

</sec:access>
{code}

For even more control of the generated URL (still avoiding hard-coding) you can use @createLink@ to build the URL, for example

{code}
<sec:access url='${createLink(controller: 'admin', action: 'user', base: "/")}'>

<g:link controller='admin' action='user'>Manage Users</g:link>

</sec:access>
{code}

Be sure to include the @base: "/"@ attribute in this case to avoid appending the context name to the URL.

h4. noAccess

Renders the body if the specified expression evaluates to @false@ or URL isn't allowed.

{code}
<sec:noAccess expression="hasRole('ROLE_USER')">

You're not a user

</sec:noAccess>
{code}

h4. link

A wrapper around the standard Grails link tag that renders if the specified expression evaluates to @true@ or URL is allowed.

To define the expression to evaluate within the tag itself:

{code}
<sec:link controller="myController" action="myAction" expression="hasRole('ROLE_USER')">My link text</sec:link>
{code}

To use access controls defined, for example, in the interceptUrlMap:

{code}
<sec:link controller="myController" action="myAction">My link text</sec:link>
{code}
