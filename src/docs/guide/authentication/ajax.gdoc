The typical pattern of using web site authentication to access restricted pages involves intercepting access requests for secure pages, redirecting to a login page (possibly off-site, for example when using [OpenID|http://grails.org/plugin/spring-security-openid] or a Single Sign-on implementation such as [CAS|http://grails.org/plugin/spring-security-cas]), and redirecting back to the originally-requested page after a successful login. Each page can also have a login link to allow explicit logins at any time.

Another option is to also have a login link on each page and to use Ajax and DHTML to present a login form within the current page in a popup. The form submits the authentication request through Ajax and displays success or error messages as appropriate.

The plugin supports Ajax logins, but you need to create your own GSP code. There are only a few necessary changes, and of course the sample code here is pretty basic so you should enhance it for your needs.

The approach here involves editing your template page(s) to show "You're logged in as ..." text if logged in and a login link if not, along with a hidden login form that is shown using DHTML.

Here's the updated @grails-app/views/layouts/main.gsp@:

{code}
<html>

<head>
   <title><g:layoutTitle default="Grails" /></title>
   <link rel="stylesheet" href="${resource(dir:'css',file:'main.css')}" />
   <link rel="shortcut icon" type="image/x-icon"
         href="${resource(dir:'images',file:'favicon.ico')}" />
   <g:layoutHead />
   <r:layoutResources />
</head>

<body>

   <div id="spinner" class="spinner" style="display:none;">
      <img src="${resource(dir:'images',file:'spinner.gif')}" alt="Spinner" />
   </div>

   <div id="grailsLogo" class="logo">
      <a href="http://grails.org">
         <img src="${resource(dir:'images',file:'grails_logo.png')}" alt="Grails" border="0" />
      </a>

      <span id='loginLink' style='position: relative; margin-right: 30px; float: right'>
      <sec:ifLoggedIn>
         Logged in as <sec:username/> (<g:link controller='logout'>Logout</g:link>)
      </sec:ifLoggedIn>
      <sec:ifNotLoggedIn>
         <a href='#' onclick='showLogin(); return false;'>Login</a>
      </sec:ifNotLoggedIn>
      </span>

   </div>
   <!-- http://dev.iceburg.net/jquery/jqModal/ -->
   <g:javascript src='jqModal.js' />

   <g:render template='/includes/ajaxLogin'/>

   <g:layoutBody />
   <r:layoutResources />
   </body>
</html>
{code}

Note these changes:

* The jqModal (jQuery) library is included for Ajax support and to hide and show the login form.
* There is an include of the template @/includes/ajaxLogin@ (see the code below).
* There is a <span> positioned in the top-right that shows the username and a logout link when logged in, and a login link otherwise.

Here is the content of the login form template (@grails-app/views/includes/_ajaxLogin.gsp@). The CSS and Javascript are shown inline, but you should extract them to their own static files.

{code}
<style>
#ajaxLogin {
   background-color: #EEEEFF
   display: none;
}
#ajaxLogin .inner {
   width: 260px;
   margin:0px auto;
   text-align:left;
   padding:10px;
   border-top:1px dashed #499ede;
   border-bottom:1px dashed #499ede;
   background-color:#EEF;
}
#ajaxLogin .inner .fheader {
   padding:4px;margin:3px 0px 3px 0;color:#2e3741;font-size:14px;font-weight:bold;
}
#ajaxLogin .inner .cssform p {
   clear: left;
   margin: 0;
   padding: 5px 0 8px 0;
   padding-left: 105px;
   border-top: 1px dashed gray;
   margin-bottom: 10px;
   height: 1%;
}
#ajaxLogin .inner .cssform input[type='text'] {
   width: 120px;
}
#ajaxLogin .inner .cssform label{
   font-weight: bold;
   float: left;
   margin-left: -105px;
   width: 100px;
}
#ajaxLogin .inner .login_message {color:red;}
#ajaxLogin .inner .text_ {width:120px;}
#ajaxLogin .inner .chk {height:12px;}
.errorMessage { color: red; }
</style>

<div id='ajaxLogin' class="jqmWindow" style="z-index: 3000;">
   <div class='inner'>
      <div class='fheader'>Please Login..</div>
      <form action='${request.contextPath}/j_spring_security_check' method='POST'
            id='ajaxLoginForm' name='ajaxLoginForm' class='cssform'>
         <p>
            <label for='username'>Login ID</label>
            <input type='text' class='text_' name='j_username' id='username' />
         </p>
         <p>
            <label for='password'>Password</label>
            <input type='password' class='text_' name='j_password' id='password' />
         </p>
         <p>
            <label for='remember_me'>Remember me</label>
            <input type='checkbox' class='chk' id='remember_me'
                   name='_spring_security_remember_me'/>
         </p>
         <p>
            <span class="button" id="authAjax">Login</span>
            <span class="button" id="cancelLogin">Cancel</span>
         </p>
      </form>
      <div style='display: none; text-align: left;' id='loginMessage'></div>
   </div>
</div>

<script type='text/javascript'>
var onLogin;
$.ajaxSetup({
   beforeSend: function(xhr, event) {
      // save the 'success' function for later use
      onLogin = event.success;
   },
   statusCode: {
      // Set up a global AJAX error handler to handle the 401
      // unauthorized responses. If a 401 status code comes back,
      // the user is no longer logged-into the system and can not
      // use it properly.
      401: function() {
         showLogin();
      }
   }
});

function showLogin() {
   var ajaxLogin = $('#ajaxLogin');
   ajaxLogin.css('text-align','center');
   // use jqModal to show and align login panel
   ajaxLogin.jqmShow();
}

function cancelLogin() {
   $('#ajaxLogin').jqmHide();
}

function authAjax() {
   $('#loginMessage').html('Sending request ...').show();

   var form = $('#ajaxLoginForm');
   var config = {
      type: 'post',
      url: form.attr('action'),
      data: form.serialize(),
      async: false,
      dataType: 'JSON',
      success: function(response) {
         form[0].reset();
         $('#loginMessage').empty();
         $('#ajaxLogin').jqmHide();
         if (onLogin) {
            // execute the saved event.success function
            onLogin(response);
         }
      },
      error: function (response) {
         var responseText = response.responseText || '[]';
         var json = responseText.evalJSON();
         if (json.error) {
            $('#loginMessage').html("<span class='errorMessage'>" + json.error + '</error>');
         }
         else {
            $('#loginMessage').html(responseText);
         }
      },
      beforeSend: function(xhr, event) {
         //console.log("overriding default behaviour");
      }
   }
   $.ajax(config);
}

$(function() {
   $('#ajaxLogin').jqm({modal: true, trigger: 'span.jqmTrigger'});
   $('#authAjax').click(authAjax);
   $('#cancelLogin').click(cancelLogin);
});
</script>
{code}

The important aspects of this code are:

* The form posts to the same URL as the regular form, @j_spring_security_check@. In fact, the form is identical, including the remember-me checkbox, except that the submit button is replaced with a hyperlink.
* Error messages are displayed within the popup <div>.
* Because there is no page redirect after successful login, the Javascript replaces the login link to give a visual indication that the user is logged in.
* The original jQuery "success" function is retried with the results from the original request.
* Details of logout are not shown; you do this by redirecting the user to @/j_spring_security_logout@.

h4. How Does Ajax login Work?

Most Ajax libraries (Prototype, JQuery, and Dojo as of v2.1) include an @X-Requested-With@ header that indicates that the request was made by @XMLHttpRequest@ instead of being triggered by clicking a regular hyperlink or form submit button. The plugin uses this header to detect Ajax login requests, and uses subclasses of some of Spring Security's classes to use different redirect urls for Ajax requests than regular requests. Instead of showing full pages, @LoginController@ has JSON-generating methods @ajaxSuccess()@, @ajaxDenied()@, and @authfail()@ that generate JSON that the login Javascript code can use to appropriately display success or error messages.

You can see the Ajax-aware actions in @LoginController@, specifically @ajaxSuccess@ and @ajaxDenied@, which send JSON responses that can be used by client JavaScript code. Also @authfail@ will check whether the authentication request used Ajax and will render a JSON error response if it did.

To summarize, the typical flow would be
* click the link to display the login form
* enter authentication details and click login
* the form is submitted using an Ajax request
* if the authentication succeeds:
** a redirect to @/login/ajaxSuccess@ occurs (this URL is configurable)
** the rendered response is JSON and it contains two values, a boolean value @success@ with the value @true@ and a string value @username@ with the authenticated user's login name
** the client determines that the login was successful and updates the page to indicate the the user is logged in; this is necessary since there's no page redirect like there would be for a non-Ajax login
* if the authentication fails:
** a redirect to @/login/authfail?ajax=true@ occurs (this URL is configurable)
** the rendered response is JSON and it contains one value, a string value @error@ with the displayable error message; this will be different depending on why the login was unsuccessful (bad username or password, account locked, etc.)
** the client determines that the login was not successful and displays the error message
* note that both a successful and an unsuccessful login will trigger the @onSuccess@ Ajax callback; the @onError@ callback will only be triggered if there's an exception or network issue

h4. Triggering an Ajax login

So far we've discussed explicit Ajax logins where the user can view some of the site's pages but you've added a link to an in-page login form. An attempt to load a secure page will trigger a redirect to the standard login page. But if you're using Ajax in your pages you should handle the case where the request is secure and requires being logged in. This will also handle session timeouts where the user doesn't have a remember-me cookie; you can pop up a login dialog in the page.

For example consider this Ajax form:

{code}
<g:form action="ajaxAdd">
   <g:textArea id='postContent' name="content"
               rows="3" cols="50" onkeydown="updateCounter()" />
   <br/>
   <g:submitToRemote value="Post"
      url="[controller: 'post', action: 'addPostAjax']"
      update="[success: 'firstPost']"
      onSuccess="clearPost(e)"
      onLoading="showSpinner(true)"
      onComplete="showSpinner(false)"
      on401="showLogin();"/>
      <img id="spinner" style="display: none"
           src="<g:createLinkTo dir='/images' file='spinner.gif'/>"
   />
</g:form>
{code}

or

{code}
<script>
var detailConfig = {
   type: 'post',
   async: false,
   returnType: 'html',
   url: '/post/addPostAjax',
   success: function(data) {
      $('#firstPost').html(data);
      clearPost(e);
   }
};

$.ajax(detailConfig);
</script>
{code}

Most of the attributes are typical, but the @on401@ attribute is the key to making Ajax logins work. As long as the @LoginController@ sends a 401 error code the need to authenticate can be easily handled.

Note that depending on the version of the plugin that you're using, you may need to add the @authAjax@ method to your @LoginController@:

{code}
def authAjax() {
   response.setHeader 'Location', SpringSecurityUtils.securityConfig.auth.ajaxLoginFormUrl
   response.sendError HttpServletResponse.SC_UNAUTHORIZED
}
{code}

and this requires an import for @javax.servlet.http.HttpServletResponse@.
